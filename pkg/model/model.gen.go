// Package model provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package model

import "github.com/MagicTheGathering/mtg-sdk-go"

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for MtgGameManagerGameFormat.
const (
	MtgGameManagerGameFormatEndCleanup MtgGameManagerGameFormat = "End-Cleanup"
	MtgGameManagerGameFormatEndStep    MtgGameManagerGameFormat = "End-Step"
	MtgGameManagerGameFormatMainSecond MtgGameManagerGameFormat = "Main-Second"
)

// Defines values for MtgGameManagerGamePhase.
const (
	MtgGameManagerGamePhaseBeginDraw              MtgGameManagerGamePhase = "Begin-Draw"
	MtgGameManagerGamePhaseBeginUntap             MtgGameManagerGamePhase = "Begin-Untap"
	MtgGameManagerGamePhaseBeginUpkeep            MtgGameManagerGamePhase = "Begin-Upkeep"
	MtgGameManagerGamePhaseCombatBeginning        MtgGameManagerGamePhase = "Combat-Beginning"
	MtgGameManagerGamePhaseCombatDamage           MtgGameManagerGamePhase = "Combat-Damage"
	MtgGameManagerGamePhaseCombatDeclareAttackers MtgGameManagerGamePhase = "Combat-Declare-Attackers"
	MtgGameManagerGamePhaseCombatDeclareBlockers  MtgGameManagerGamePhase = "Combat-Declare-Blockers"
	MtgGameManagerGamePhaseCombatEnd              MtgGameManagerGamePhase = "Combat-End"
	MtgGameManagerGamePhaseEndCleanup             MtgGameManagerGamePhase = "End-Cleanup"
	MtgGameManagerGamePhaseEndStep                MtgGameManagerGamePhase = "End-Step"
	MtgGameManagerGamePhaseMainFirst              MtgGameManagerGamePhase = "Main-First"
	MtgGameManagerGamePhaseMainSecond             MtgGameManagerGamePhase = "Main-Second"
)

// Health Simple Health Check
type Health struct {
	Ok *bool `json:"ok,omitempty"`
}

// MtgBattleCard Magic: The Gathering card data with meta data for in play. This augments the card for in play activities.
type MtgBattleCard struct {
	// Card Magic: The Gathering card data
	Card *MtgCard `json:"card,omitempty"`

	// IsAttacker boolean signaling the card is being used this turn as an attacker within play or battle.
	IsAttacker *bool `json:"is_attacker,omitempty"`

	// IsBlocker boolean signaling the card is being used this turn as a blocker within play or battle.
	IsBlocker *bool `json:"is_blocker,omitempty"`

	// IsTapped boolean signaling the card has been tapped this turn within play or battle.
	IsTapped *bool `json:"is_tapped,omitempty"`

	// Life life of this creature this turn.
	Life *string `json:"life,omitempty"`

	// Power power of attack or defense this turn.
	Power *string `json:"power,omitempty"`
}

// MtgBattleField Magic: The Gathering Standard game play meta data
type MtgBattleField struct {
	// Creatures Creatures List
	Creatures []MtgBattleCard `json:"creatures"`

	// Lands Lands / Resources List
	Lands []MtgBattleCard `json:"lands"`
}

// MtgCard Magic: The Gathering card data
type MtgCard struct {
	// Artist The artist of the card. This may not match what is on the card as MTGJSON corrects many card misprints.
	Artist *string `json:"artist,omitempty"`

	// Border If the border for this specific card is DIFFERENT than the border specified in the top level set JSON, then it will be specified here. (Example: Unglued has silver borders, except for the lands which are black bordered)
	Border *string `json:"border,omitempty"`

	// Cmc Converted mana cost. Always a number.
	Cmc *float64 `json:"cmc,omitempty"`

	// ColorIdentity The card colors by color code. ["Red", "Blue"] becomes ["R", "U"]
	ColorIdentity *[]string `json:"colorIdentity,omitempty"`

	// Colors The card colors. Usually this is derived from the casting cost, but some cards are special (like the back of dual sided cards and Ghostfire).
	Colors *[]string `json:"colors,omitempty"`

	// Flavor The flavor text of the card.
	Flavor *string `json:"flavor,omitempty"`

	// ForeignNames Foreign language names for the card, if this card in this set was printed in another language. An array of objects, each object having 'language', 'name' and 'multiverseid' keys. Not available for all sets.
	ForeignNames *[]mtg.ForeignCardName `json:"foreignNames,omitempty"`

	// Hand Maximum hand size modifier. Only exists for Vanguard cards.
	Hand *int `json:"hand,omitempty"`

	// Id A unique id for this card. It is made up by doing an SHA1 hash of setCode + cardName + cardImageName
	Id *mtg.CardId `json:"id,omitempty"`

	// ImageUrl The image url for a card. Only exists if the card has a multiverse id.
	ImageUrl *string `json:"imageUrl,omitempty"`

	// Layout The card layout. Possible values: normal, split, flip, double-faced, token, plane, scheme, phenomenon, leveler, vanguard
	Layout *string `json:"layout,omitempty"`

	// Legalities Which formats this card is legal, restricted or banned in. An array of objects, each object having 'format' and 'legality'.
	Legalities *[]mtg.Legality `json:"legalities,omitempty"`

	// Life Starting life total modifier. Only exists for Vanguard cards.
	Life *int `json:"life,omitempty"`

	// Loyalty The loyalty of the card. This is only present for planeswalkers.
	Loyalty *string `json:"loyalty,omitempty"`

	// ManaCost The mana cost of this card. Consists of one or more mana symbols. (use cmc and colors to query)
	ManaCost *string `json:"manaCost,omitempty"`

	// Multiverseid The multiverseid of the card on Wizard's Gatherer web page. Cards from sets that do not exist on Gatherer will NOT have a multiverseid. Sets not on Gatherer are: ATH, ITP, DKM, RQS, DPA and all sets with a 4 letter code that starts with a lowercase 'p'.
	Multiverseid *mtg.MultiverseId `json:"multiverseid,omitempty"`

	// Name The card name. For split, double-faced and flip cards, just the name of one side of the card. Basically each 'sub-card' has its own record.
	Name *string `json:"name,omitempty"`

	// Names Only used for split, flip and dual cards. Will contain all the names on this card, front or back.
	Names *[]string `json:"names,omitempty"`

	// Number The card number. This is printed at the bottom-center of the card in small text. This is a string, not an integer, because some cards have letters in their numbers.
	Number *string `json:"number,omitempty"`

	// OriginalText The original text on the card at the time it was printed. This field is not available for promo cards.
	OriginalText *string `json:"originalText,omitempty"`

	// OriginalType The original type on the card at the time it was printed. This field is not available for promo cards.
	OriginalType *string `json:"originalType,omitempty"`

	// Power The power of the card. This is only present for creatures. This is a string, not an integer, because some cards have powers like: "1+*"
	Power *string `json:"power,omitempty"`

	// Printings The sets that this card was printed in, expressed as an array of set codes.
	Printings *[]mtg.SetCode `json:"printings,omitempty"`

	// Rarity The rarity of the card. Examples: Common, Uncommon, Rare, Mythic Rare, Special, Basic Land
	Rarity *string `json:"rarity,omitempty"`

	// ReleaseDate The date this card was released. This is only set for promo cards. The date may not be accurate to an exact day and month, thus only a partial date may be set (YYYY-MM-DD or YYYY-MM or YYYY). Some promo cards do not have a known release date.
	ReleaseDate *string `json:"releaseDate,omitempty"`

	// Reserved Set to true if this card is reserved by Wizards Official Reprint Policy
	Reserved *bool `json:"reserved,omitempty"`

	// Rulings The rulings for the card.
	Rulings *[]*mtg.Ruling `json:"rulings,omitempty"`

	// Set The set the card belongs to (set code).
	Set *mtg.SetCode `json:"set,omitempty"`

	// SetName The set the card belongs to.
	SetName *string `json:"setName,omitempty"`

	// Source For promo cards, this is where this card was originally obtained. For box sets that are theme decks, this is which theme deck the card is from.
	Source *string `json:"source,omitempty"`

	// Starter Set to true if this card was only released as part of a core box set. These are technically part of the core sets and are tournament legal despite not being available in boosters.
	Starter *bool `json:"starter,omitempty"`

	// Subtypes The subtypes of the card. These appear to the right of the dash in a card type. Usually each word is its own subtype. Example values: Trap, Arcane, Equipment, Aura, Human, Rat, Squirrel, etc.
	Subtypes *[]string `json:"subtypes,omitempty"`

	// Supertypes The supertypes of the card. These appear to the far left of the card type. Example values: Basic, Legendary, Snow, World, Ongoing
	Supertypes *[]string `json:"supertypes,omitempty"`

	// Text The oracle text of the card. May contain mana symbols and other symbols.
	Text *string `json:"text,omitempty"`

	// Timeshifted If this card was a timeshifted card in the set.
	Timeshifted *bool `json:"timeshifted,omitempty"`

	// Toughness The toughness of the card. This is only present for creatures. This is a string, not an integer, because some cards have toughness like: "1+*"
	Toughness *string `json:"toughness,omitempty"`

	// Type The card type. This is the type you would see on the card if printed today. Note: The dash is a UTF8 'long dash' as per the MTG rules
	Type *string `json:"type,omitempty"`

	// Types The types of the card. These appear to the left of the dash in a card type. Example values: Instant, Sorcery, Artifact, Creature, Enchantment, Land, Planeswalker
	Types *[]string `json:"types,omitempty"`

	// Variations If a card has alternate art (for example, 4 different Forests, or the 2 Brothers Yamazaki) then each other variation's multiverseid will be listed here, NOT including the current card's multiverseid.
	Variations *[]string `json:"variations,omitempty"`

	// Watermark The watermark on the card. Note: Split cards don't currently have this field set, despite having a watermark on each side of the split card.
	Watermark *string `json:"watermark,omitempty"`
}

// MtgGameManager Magic: The Gathering Game Manager and Game meta data
type MtgGameManager struct {
	// GameFormat Magic offically labels its gameplay as "Begin, Main Phase, Combat, Second Main Phase, and End"; some have subphases. For details see: https://en.wikipedia.org/wiki/Magic:_The_Gathering_rules#Gameplay.
	GameFormat MtgGameManagerGameFormat `json:"game_format"`

	// GamePhase Magic offically labels its gameplay as "Begin, Main Phase, Combat, Second Main Phase, and End"; some have subphases. For details see: https://en.wikipedia.org/wiki/Magic:_The_Gathering_rules#Gameplay.
	GamePhase MtgGameManagerGamePhase `json:"game_phase"`

	// InvalidPlayers List of errors from players' decks or other data. Empty list signals all players are valid and ready to play.
	InvalidPlayers []map[string]interface{} `json:"invalid_players"`

	// PlayerTurn Current player turn. Index of playerBattleFields.
	PlayerTurn int `json:"player_turn"`

	// Players List Players playing MTG.
	Players []MtgPlayer `json:"players"`
}

// MtgGameManagerGameFormat Magic offically labels its gameplay as "Begin, Main Phase, Combat, Second Main Phase, and End"; some have subphases. For details see: https://en.wikipedia.org/wiki/Magic:_The_Gathering_rules#Gameplay.
type MtgGameManagerGameFormat string

// MtgGameManagerGamePhase Magic offically labels its gameplay as "Begin, Main Phase, Combat, Second Main Phase, and End"; some have subphases. For details see: https://en.wikipedia.org/wiki/Magic:_The_Gathering_rules#Gameplay.
type MtgGameManagerGamePhase string

// MtgPlayer Magic: The Gathering Standard game play meta data
type MtgPlayer struct {
	// Deck Deck cards List. Rules of the Deck: 60 Card minimum, 4 limit on copies (exception for basic lands).
	Deck []MtgCard `json:"deck"`

	// Name Player Name
	Name string `json:"name"`

	// Zones Cards in each Zone
	Zones []MtgZones `json:"zones"`
}

// MtgSet Magic: The Gathering card data
type MtgSet struct {
	// Name Set Name
	Name *string `json:"name,omitempty"`
}

// MtgZones Magic: The Gathering Standard game play meta data
type MtgZones struct {
	// Battlefield Cards in Battlefield
	Battlefield []struct {
		// Creatures Creatures List
		Creatures []MtgBattleCard `json:"creatures"`

		// Lands Lands / Resources List
		Lands []MtgBattleCard `json:"lands"`
	} `json:"battlefield"`

	// Exile Lands / Resources List
	Exile []MtgBattleCard `json:"exile"`

	// Graveyard Lands / Resources List
	Graveyard []MtgBattleCard `json:"graveyard"`

	// Hand List of cards in Player hand
	Hand []MtgBattleCard `json:"hand"`

	// Library Lands / Resources List
	Library []MtgBattleCard `json:"library"`

	// TheStack Spells unresolved List
	TheStack []MtgBattleCard `json:"the_stack"`
}

// OpenWeatherMapParametersGetCurrentData Open Weather Map API Parameters for Get Weather Data. See OpenWeatherMap details on APIs: https://openweathermap.org/current
type OpenWeatherMapParametersGetCurrentData struct {
	// AppId The API Key for access to OpenWeatherMap API
	AppId *string `json:"appid"`

	// Language Change the language the response is in. Default is English.
	Language *string `json:"lang"`

	// Latitude The latitude for which temperature data is retrieved for.
	Latitude *float64 `json:"lat"`

	// Longitude The longitude for which temperature data is retrieved for.
	Longitude *float64 `json:"lon"`

	// Mode Response format. Possible values are xml and html. If you don't use the mode parameter format is JSON by default.
	Mode *string `json:"mode"`

	// Units Change the units the temperature response is in. Can be [standard, metric, imperial]. Where standard is absolute or Kelvin, metric is Celsius, imperial is Fahrenheit.
	Units *string `json:"units"`
}

// OpenWeatherMapResponse Open Weather API Response to GET Current Data: https://api.openweathermap.org/data/2.5/weather.
type OpenWeatherMapResponse struct {
	Base string `json:"base"`

	// Clouds Open Weather API Clouds Data.
	Clouds OpenWeatherMapResponseClouds `json:"Clouds"`
	Cod    int64                        `json:"cod"`

	// Coordinates Open Weather API Coordinates Data.
	Coordinates OpenWeatherMapResponseCoordinates `json:"Coordinates"`
	Id          int64                             `json:"id"`

	// Main Open Weather API Main Data.
	Main OpenWeatherMapResponseMain `json:"Main"`
	Name string                     `json:"name"`

	// Rain Open Weather API Rain Data.
	Rain *OpenWeatherMapResponseRain `json:"Rain,omitempty"`

	// Snow Open Weather API Snow Data.
	Snow *OpenWeatherMapResponseSnow `json:"Snow,omitempty"`

	// System Open Weather API System Data.
	System     OpenWeatherMapResponseSystem `json:"System"`
	TimeData   float64                      `json:"dt"`
	TimeZone   *int64                       `json:"timezone"`
	Visibility float64                      `json:"visibility"`

	// Weather Open Weather API Weather Data.
	Weather []OpenWeatherMapResponseWeather `json:"weather"`

	// Wind Open Weather API Wind Data.
	Wind OpenWeatherMapResponseWind `json:"Wind"`
}

// OpenWeatherMapResponseClouds Open Weather API Clouds Data.
type OpenWeatherMapResponseClouds struct {
	// CloudinessPercent Cloudiness, %
	CloudinessPercent float64 `json:"all"`
}

// OpenWeatherMapResponseCoordinates Open Weather API Coordinates Data.
type OpenWeatherMapResponseCoordinates struct {
	// Latitude Longitude of the location
	Latitude float64 `json:"lat"`

	// Longitude Latitude of the location
	Longitude float64 `json:"lon"`
}

// OpenWeatherMapResponseMain Open Weather API Main Data.
type OpenWeatherMapResponseMain struct {
	// FeelsLike Temperature. This temperature parameter accounts for the human perception of weather. Unit Default: Kelvin, Metric: Celsius, Imperial: Fahrenheit
	FeelsLike float64 `json:"feels_like"`

	// GroundLevel Atmospheric pressure on the ground level, hPa
	GroundLevel float64 `json:"grnd_level"`

	// Humidity Humidity, %
	Humidity float64 `json:"humidity"`

	// Pressure Atmospheric pressure on the sea level, hPa
	Pressure float64 `json:"pressure"`

	// SeaLevel Atmospheric pressure on the sea level, hPa
	SeaLevel float64 `json:"sea_level"`

	// Temperature Temperature. Unit Default: Kelvin, Metric: Celsius, Imperial: Fahrenheit
	Temperature float64 `json:"temp"`

	// TemperatureMax Maximum temperature at the moment. This is maximal currently observed temperature (within large megalopolises and urban areas). Please find more info here. Unit Default: Kelvin, Metric: Celsius, Imperial: Fahrenheit
	TemperatureMax float64 `json:"temp_max"`

	// TemperatureMin Minimum temperature at the moment. This is minimal currently observed temperature (within large megalopolises and urban areas). Please find more info here. Unit Default: Kelvin, Metric: Celsius, Imperial: Fahrenheit
	TemperatureMin float64 `json:"temp_min"`
}

// OpenWeatherMapResponseRain Open Weather API Rain Data.
type OpenWeatherMapResponseRain struct {
	// Volume1Hour (where available) Rain volume for the last 1 hour, mm. Please note that only mm as units of measurement are available for this parameter
	Volume1Hour float64 `json:"1h"`

	// Volume3Hour (where available) Rain volume for the last 3 hours, mm. Please note that only mm as units of measurement are available for this parameter
	Volume3Hour float64 `json:"3h"`
}

// OpenWeatherMapResponseSnow Open Weather API Snow Data.
type OpenWeatherMapResponseSnow struct {
	// Volume1Hour (where available) Snow volume for the last 1 hour, mm. Please note that only mm as units of measurement are available for this parameter
	Volume1Hour float64 `json:"1h"`

	// Volume3Hour (where available) Snow volume for the last 3 hours, mm. Please note that only mm as units of measurement are available for this parameter
	Volume3Hour float64 `json:"3h"`
}

// OpenWeatherMapResponseSystem Open Weather API System Data.
type OpenWeatherMapResponseSystem struct {
	// Country Country code (GB, JP etc.)
	Country string `json:"country"`

	// Id Internal parameter
	Id int64 `json:"id"`

	// Message Internal parameter
	Message string `json:"message"`

	// Sunrise Sunrise time, unix, UTC
	Sunrise int64 `json:"sunrise"`

	// Sunset Sunset time, unix, UTC
	Sunset int64 `json:"sunset"`

	// Type Internal parameter
	Type int64 `json:"type"`
}

// OpenWeatherMapResponseWeather Open Weather API Weather Data.
type OpenWeatherMapResponseWeather struct {
	// Description Weather condition within the group. Please find more here. You can get the output in your language.
	Description string `json:"description"`

	// Icon Weather icon id
	Icon string `json:"icon"`

	// Id Weather condition id
	Id int64 `json:"id"`

	// Main Group of weather parameters (Rain, Snow, Clouds etc.)
	Main string `json:"main"`
}

// OpenWeatherMapResponseWind Open Weather API Wind Data.
type OpenWeatherMapResponseWind struct {
	// Gust Wind gust. Unit Default: meter/sec, Metric: meter/sec, Imperial: miles/hour
	Gust float64 `json:"gust"`

	// Speed Wind speed. Unit Default: meter/sec, Metric: meter/sec, Imperial: miles/hour
	Speed float64 `json:"speed"`

	// WindDirectionDegrees Wind direction, degrees (meteorological)
	WindDirectionDegrees float64 `json:"deg"`
}

// WeatherConditionGetParameters Weather Web App Parameters for Get Weather Data
type WeatherConditionGetParameters struct {
	// AppId OpenWeatherMap API ID/Key generated by signing up to use their APIs
	AppId *string `json:"appid"`

	// Latitude latitude of location on earth to get weather data for
	Latitude *float64 `json:"lat"`

	// Longitude longitude of location on earth to get weather data for
	Longitude *float64 `json:"lon"`
}

// WeatherConditionGetResponse Weather Web App Parameters for Get Weather Data
type WeatherConditionGetResponse struct {
	// City The City found at the latitude & longitude
	City string `json:"city"`

	// OutsideCondition The outside condition.
	OutsideCondition string `json:"outside_condition"`

	// Temperature The temperature in degrees fahrenheit
	Temperature string `json:"temperature"`

	// TemperatureCondition The temperature condition.
	TemperatureCondition string `json:"temperature_condition"`
}

// GetV1WeatherDataParams defines parameters for GetV1WeatherData.
type GetV1WeatherDataParams struct {
	// Lat Latitude to get weather conditions for.
	Lat float64 `form:"lat" json:"lat"`

	// Lon Longitude to get weather conditions for.
	Lon float64 `form:"lon" json:"lon"`

	// Appid API ID to Open Weather API.
	Appid string `form:"appid" json:"appid"`
}
