package weather

import (
	"context"
	"encoding/json"

	"github.com/CLesnar/go/internal/pkg/http"
)

const (
	EnvVarOpenWeatherMapBaeUrl   = "OPEN_WEATHER_MAP_BASE_URL"
	DefaultOpenWeatherMapBaseUrl = "https://api.openweathermap.org/data/2.5/weather"
)

var (
	OpenWeatherMapBaseUrl = DefaultOpenWeatherMapBaseUrl
)

type Weather interface {
	GetCurrentWeatherData(criteria interface{}, parameters interface{}) interface{}
}

// See OpenWeatherMap details on APIs: https://openweathermap.org/current
// Example of API call to CurrentWeatherData:
// https://api.openweathermap.org/data/2.5/weather?lat=44.34&lon=10.99&appid={API key}
type OpenWeatherMap struct {
}

type OpenWeatherMapParametersGetCurrentDat struct {
	Latitude  int64   `json:"lat"`             // latitude of location on earth to get weather data for
	Longitude int64   `json:"lon"`             // longitude of location on earth to get weather data for
	ApiId     string  `json:"appid"`           // OpenWeatherMap API ID/Key generated by signing up to use their APIs
	Mode      *string `json:"mode,omitempty"`  // Response format. Possible values are xml and html. If you don't use the mode parameter format is JSON by default.
	Units     *string `json:"units,omitempty"` // Units of measurement. standard, metric and imperial units are available. If you do not use the units parameter, standard units will be applied by default.
	Language  *string `json:"lang,omitempty"`  // You can use this parameter to get the output in your language.
}

type OpenWeatherMaResponsepGetCurrentData struct {
	Coordinates struct {
		Longitude int64 `json:"lon"` // Longitude of the location
		Latitude  int64 `json:"lat"` // Latitude of the location
	} `json:"coord"`
	Weather struct {
		Id          int64  `json:"id"`          // Weather condition id
		Main        string `json:"main"`        // Group of weather parameters (Rain, Snow, Clouds etc.)
		Description string `json:"description"` //  Weather condition within the group. Please find more here. You can get the output in your language.
		Icon        string `json:"icon"`        // Weather icon id
	} `json:"weather"`
	Base string `json:"base"` // Internal parameter
	Main struct {
		Temperature    string `json:"temp"`       //  Temperature. Unit Default: Kelvin, Metric: Celsius, Imperial: Fahrenheit
		FeelsLike      string `json:"feels_like"` // Temperature. This temperature parameter accounts for the human perception of weather. Unit Default: Kelvin, Metric: Celsius, Imperial: Fahrenheit
		Pressure       string `json:"pressure"`   // Atmospheric pressure on the sea level, hPa
		Humidity       string `json:"humidity"`   // Humidity, %
		TemperatureMin string `json:"temp_min"`   // Minimum temperature at the moment. This is minimal currently observed temperature (within large megalopolises and urban areas). Please find more info here. Unit Default: Kelvin, Metric: Celsius, Imperial: Fahrenheit
		TemperatureMax string `json:"temp_max"`   // Maximum temperature at the moment. This is maximal currently observed temperature (within large megalopolises and urban areas). Please find more info here. Unit Default: Kelvin, Metric: Celsius, Imperial: Fahrenheit
		SeaLevel       string `json:"sea_level"`  // Atmospheric pressure on the sea level, hPa
		GroundLevel    string `json:"grnd_level"` // Atmospheric pressure on the ground level, hPa
	} `json:"main"`
	Visibility string `json:"visibility"` // Visibility, meter. The maximum value of the visibility is 10 km
	Wind       struct {
		Speed                string `json:"speed"` // Wind speed. Unit Default: meter/sec, Metric: meter/sec, Imperial: miles/hour
		WindDirectionDegrees int64  `json:"deg"`   // Wind direction, degrees (meteorological)
		Gust                 string `json:"gust"`  // Wind gust. Unit Default: meter/sec, Metric: meter/sec, Imperial: miles/hour
	} `json:"wind"`
	Clouds struct {
		CloudinessPercent int64 `json:"all"` // Cloudiness, %
	} `json:"clouds"`
	Rain struct {
		Volume1Hour string `json:"1h,omitempty"` // (where available) Rain volume for the last 1 hour, mm. Please note that only mm as units of measurement are available for this parameter
		Volume3Hour string `json:"3h,omitempty"` // (where available) Rain volume for the last 3 hours, mm. Please note that only mm as units of measurement are available for this parameter
	} `json:"rain,omitempty"`
	Snow struct {
		Volume1Hour string `json:"1h,omitempty"` // (where available) Snow volume for the last 1 hour, mm. Please note that only mm as units of measurement are available for this parameter
		Volume3Hour string `json:"3h,omitempty"` // (where available)Snow volume for the last 3 hours, mm. Please note that only mm as units of measurement are available for this parameter
	} `json:"snow,omitempty"`
	TimeData string `json:"dt"` // Time of data calculation, unix, UTC
	System   struct {
		Type    string `json:"type"`    // Internal parameter
		Id      string `json:"id"`      // Internal parameter
		Message string `json:"message"` // Internal parameter
		Country string `json:"country"` // Country code (GB, JP etc.)
		Sunrise string `json:"sunrise"` // Sunrise time, unix, UTC
		Sunset  string `json:"sunset"`  // Sunset time, unix, UTC
	} `json:"sys"`
	TimeZone string `json:"timezone"` // Shift in seconds from UTC
	Id       int64  `json:"id"`       // City ID. Please note that built-in geocoder functionality has been deprecated.
	Name     int64  `json:"name"`     // City name. Please note that built-in geocoder functionality has been deprecated.
	Cod      int64  `json:"cod"`      // Internal parameter
}

func (w *OpenWeatherMap) GetCurrentWeatherData(ctx context.Context, criteria interface{}, parameters interface{}) (interface{}, error) {
	httpHelper := http.Http{}
	resp, err := httpHelper.GetRequest(ctx, OpenWeatherMapBaseUrl, criteria, parameters, nil)
	if err != nil {
		return nil, err
	}
	openWeatherResponse := OpenWeatherMaResponsepGetCurrentData{}
	if err := json.Unmarshal(resp, &openWeatherResponse); err != nil {
		return nil, err
	}
	return openWeatherResponse, nil
}

// func GetWeatherDataHandler(w http.ResponseWriter, r *http.Request) {
// 	openWeatherMap := OpenWeatherMap{}
// 	resp, err := openWeatherMap.GetCurrentWeatherData(ctx, criteria, parameters)
// 	if err != nil {
// 		fmt.Printf("error: %v", err)
// 	}
// }
