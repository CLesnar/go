{
  "openapi": "3.0.2",
  "info": {
    "title": "CLesnar Go Models",
    "description": "Common Data Models",
    "version": "0.1.0"
  },
  "servers": [
    {
      "url": "http:localhost:8111"
    }
  ],
  "security": [
    {
      "BearerAuth": []
    },
    {
      "ApiKeyAuth": []
    }
  ],
  "paths": {
    "/health": {
      "get": {
        "description": "Very simple Health Check",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Health"
                }
              }
            }
          }
        }
      }
    },
    "/v1/weather/data": {
      "get": {
        "description": "Get the weather condition.",
        "parameters": [
          {
            "in": "query",
            "name": "lat",
            "description": "Latitude to get weather conditions for.",
            "schema": {
              "type": "number",
              "format": "double"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "lon",
            "description": "Longitude to get weather conditions for.",
            "schema": {
              "type": "number",
              "format": "double"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "appid",
            "description": "API ID to Open Weather API.",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WeatherConditionGetResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemas": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer"
      },
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key"
      }
    },
    "schemas": {
      "Health": {
        "description": "Simple Health Check",
        "type": "object",
        "required": null,
        "properties": {
          "ok": {
            "type": "boolean"
          }
        }
      },
      "OpenWeatherMapParametersGetCurrentData": {
        "description": "Open Weather Map API Parameters for Get Weather Data. See OpenWeatherMap details on APIs: https://openweathermap.org/current",
        "type": "object",
        "required": null,
        "properties": {
          "Latitude": {
            "description": "The latitude for which temperature data is retrieved for.",
            "type": "number",
            "format": "double",
            "x-oapi-codegen-extra-tags": {
              "json": "lat"
            }
          },
          "Longitude": {
            "description": "The longitude for which temperature data is retrieved for.",
            "type": "number",
            "format": "double",
            "x-oapi-codegen-extra-tags": {
              "json": "lon"
            }
          },
          "AppId": {
            "description": "The API Key for access to OpenWeatherMap API",
            "type": "string",
            "x-oapi-codegen-extra-tags": {
              "json": "appid"
            }
          },
          "Mode": {
            "description": "Response format. Possible values are xml and html. If you don't use the mode parameter format is JSON by default.",
            "type": "string",
            "x-oapi-codegen-extra-tags": {
              "json": "mode"
            }
          },
          "Units": {
            "description": "Change the units the temperature response is in. Can be [standard, metric, imperial]. Where standard is absolute or Kelvin, metric is Celsius, imperial is Fahrenheit.",
            "type": "string",
            "x-oapi-codegen-extra-tags": {
              "json": "units"
            }
          },
          "Language": {
            "description": "Change the language the response is in. Default is English.",
            "type": "string",
            "x-oapi-codegen-extra-tags": {
              "json": "lang"
            }
          }
        }
      },
      "OpenWeatherMapResponse": {
        "description": "Open Weather API Response to GET Current Data: https://api.openweathermap.org/data/2.5/weather.",
        "type": "object",
        "required": [
          "Coordinates",
          "Weather",
          "Base",
          "Main",
          "Visibility",
          "Wind",
          "Clouds",
          "System",
          "TimeData",
          "Id",
          "Name",
          "Cod"
        ],
        "properties": {
          "Coordinates": {
            "$ref": "#/components/schemas/OpenWeatherMapResponseCoordinates",
            "x-oapi-codegen-extra-tags": {
              "json": "coord"
            }
          },
          "Weather": {
            "description": "Open Weather API Weather Data.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenWeatherMapResponseWeather"
            },
            "x-oapi-codegen-extra-tags": {
              "json": "weather"
            }
          },
          "Base": {
            "type": "string",
            "x-oapi-codegen-extra-tags": {
              "json": "base"
            }
          },
          "Main": {
            "$ref": "#/components/schemas/OpenWeatherMapResponseMain",
            "x-oapi-codegen-extra-tags": {
              "json": "main"
            }
          },
          "Visibility": {
            "type": "number",
            "format": "double",
            "x-oapi-codegen-extra-tags": {
              "json": "visibility"
            }
          },
          "Wind": {
            "$ref": "#/components/schemas/OpenWeatherMapResponseWind",
            "x-oapi-codegen-extra-tags": {
              "json": "wind"
            }
          },
          "Clouds": {
            "$ref": "#/components/schemas/OpenWeatherMapResponseClouds",
            "x-oapi-codegen-extra-tags": {
              "json": "clouds"
            }
          },
          "Rain": {
            "$ref": "#/components/schemas/OpenWeatherMapResponseRain",
            "x-oapi-codegen-extra-tags": {
              "json": "rain"
            }
          },
          "Snow": {
            "$ref": "#/components/schemas/OpenWeatherMapResponseSnow",
            "x-oapi-codegen-extra-tags": {
              "json": "snow"
            }
          },
          "TimeData": {
            "type": "number",
            "format": "double",
            "x-oapi-codegen-extra-tags": {
              "json": "dt"
            }
          },
          "System": {
            "$ref": "#/components/schemas/OpenWeatherMapResponseSystem",
            "x-oapi-codegen-extra-tags": {
              "json": "sys"
            }
          },
          "TimeZone": {
            "type": "integer",
            "format": "int64",
            "x-oapi-codegen-extra-tags": {
              "json": "timezone"
            }
          },
          "Id": {
            "type": "integer",
            "format": "int64",
            "x-oapi-codegen-extra-tags": {
              "json": "id"
            }
          },
          "Name": {
            "type": "string",
            "x-oapi-codegen-extra-tags": {
              "json": "name"
            }
          },
          "Cod": {
            "type": "integer",
            "format": "int64",
            "x-oapi-codegen-extra-tags": {
              "json": "cod"
            }
          }
        }
      },
      "OpenWeatherMapResponseClouds": {
        "description": "Open Weather API Clouds Data.",
        "type": "object",
        "required": [
          "CloudinessPercent"
        ],
        "properties": {
          "CloudinessPercent": {
            "description": "Cloudiness, %",
            "type": "number",
            "format": "double",
            "x-oapi-codegen-extra-tags": {
              "json": "all"
            }
          }
        }
      },
      "OpenWeatherMapResponseCoordinates": {
        "description": "Open Weather API Coordinates Data.",
        "type": "object",
        "required": [
          "Latitude",
          "Longitude"
        ],
        "properties": {
          "Latitude": {
            "description": "Longitude of the location",
            "type": "number",
            "format": "double",
            "x-oapi-codegen-extra-tags": {
              "json": "lat"
            }
          },
          "Longitude": {
            "description": "Latitude of the location",
            "type": "number",
            "format": "double",
            "x-oapi-codegen-extra-tags": {
              "json": "lon"
            }
          }
        }
      },
      "OpenWeatherMapResponseMain": {
        "description": "Open Weather API Main Data.",
        "type": "object",
        "required": [
          "Temperature",
          "FeelsLike",
          "Pressure",
          "Humidity",
          "TemperatureMin",
          "TemperatureMax",
          "SeaLevel",
          "GroundLevel"
        ],
        "properties": {
          "Temperature": {
            "description": "Temperature. Unit Default: Kelvin, Metric: Celsius, Imperial: Fahrenheit",
            "type": "number",
            "format": "double",
            "x-oapi-codegen-extra-tags": {
              "json": "temp"
            }
          },
          "FeelsLike": {
            "description": "Temperature. This temperature parameter accounts for the human perception of weather. Unit Default: Kelvin, Metric: Celsius, Imperial: Fahrenheit",
            "type": "number",
            "format": "double",
            "x-oapi-codegen-extra-tags": {
              "json": "feels_like"
            }
          },
          "Pressure": {
            "description": "Atmospheric pressure on the sea level, hPa",
            "type": "number",
            "format": "double",
            "x-oapi-codegen-extra-tags": {
              "json": "pressure"
            }
          },
          "Humidity": {
            "description": "Humidity, %",
            "type": "number",
            "format": "double",
            "x-oapi-codegen-extra-tags": {
              "json": "humidity"
            }
          },
          "TemperatureMin": {
            "description": "Minimum temperature at the moment. This is minimal currently observed temperature (within large megalopolises and urban areas). Please find more info here. Unit Default: Kelvin, Metric: Celsius, Imperial: Fahrenheit",
            "type": "number",
            "format": "double",
            "x-oapi-codegen-extra-tags": {
              "json": "temp_min"
            }
          },
          "TemperatureMax": {
            "description": "Maximum temperature at the moment. This is maximal currently observed temperature (within large megalopolises and urban areas). Please find more info here. Unit Default: Kelvin, Metric: Celsius, Imperial: Fahrenheit",
            "type": "number",
            "format": "double",
            "x-oapi-codegen-extra-tags": {
              "json": "temp_max"
            }
          },
          "SeaLevel": {
            "description": "Atmospheric pressure on the sea level, hPa",
            "type": "number",
            "format": "double",
            "x-oapi-codegen-extra-tags": {
              "json": "sea_level"
            }
          },
          "GroundLevel": {
            "description": "Atmospheric pressure on the ground level, hPa",
            "type": "number",
            "format": "double",
            "x-oapi-codegen-extra-tags": {
              "json": "grnd_level"
            }
          }
        }
      },
      "OpenWeatherMapResponseRain": {
        "description": "Open Weather API Rain Data.",
        "type": "object",
        "required": [
          "Volume1Hour",
          "Volume3Hour"
        ],
        "properties": {
          "Volume1Hour": {
            "description": "(where available) Rain volume for the last 1 hour, mm. Please note that only mm as units of measurement are available for this parameter",
            "type": "number",
            "format": "double",
            "x-oapi-codegen-extra-tags": {
              "json": "1h"
            }
          },
          "Volume3Hour": {
            "description": "(where available) Rain volume for the last 3 hours, mm. Please note that only mm as units of measurement are available for this parameter",
            "type": "number",
            "format": "double",
            "x-oapi-codegen-extra-tags": {
              "json": "3h"
            }
          }
        }
      },
      "OpenWeatherMapResponseSnow": {
        "description": "Open Weather API Snow Data.",
        "type": "object",
        "required": [
          "Volume1Hour",
          "Volume3Hour"
        ],
        "properties": {
          "Volume1Hour": {
            "description": "(where available) Snow volume for the last 1 hour, mm. Please note that only mm as units of measurement are available for this parameter",
            "type": "number",
            "format": "double",
            "x-oapi-codegen-extra-tags": {
              "json": "1h"
            }
          },
          "Volume3Hour": {
            "description": "(where available) Snow volume for the last 3 hours, mm. Please note that only mm as units of measurement are available for this parameter",
            "type": "number",
            "format": "double",
            "x-oapi-codegen-extra-tags": {
              "json": "3h"
            }
          }
        }
      },
      "OpenWeatherMapResponseSystem": {
        "description": "Open Weather API System Data.",
        "type": "object",
        "required": [
          "Type",
          "Id",
          "Message",
          "Country",
          "Sunrise",
          "Sunset"
        ],
        "properties": {
          "Type": {
            "description": "Internal parameter",
            "type": "integer",
            "format": "int64",
            "x-oapi-codegen-extra-tags": {
              "json": "type"
            }
          },
          "Id": {
            "description": "Internal parameter",
            "type": "integer",
            "format": "int64",
            "x-oapi-codegen-extra-tags": {
              "json": "id"
            }
          },
          "Message": {
            "description": "Internal parameter",
            "type": "string",
            "x-oapi-codegen-extra-tags": {
              "json": "message"
            }
          },
          "Country": {
            "description": "Country code (GB, JP etc.)",
            "type": "string",
            "x-oapi-codegen-extra-tags": {
              "json": "country"
            }
          },
          "Sunrise": {
            "description": "Sunrise time, unix, UTC",
            "type": "integer",
            "format": "int64",
            "x-oapi-codegen-extra-tags": {
              "json": "sunrise"
            }
          },
          "Sunset": {
            "description": "Sunset time, unix, UTC",
            "type": "integer",
            "format": "int64",
            "x-oapi-codegen-extra-tags": {
              "json": "sunset"
            }
          }
        }
      },
      "OpenWeatherMapResponseWeather": {
        "description": "Open Weather API Weather Data.",
        "type": "object",
        "required": [
          "Id",
          "Main",
          "Description",
          "Icon"
        ],
        "properties": {
          "Main": {
            "description": "Group of weather parameters (Rain, Snow, Clouds etc.)",
            "type": "string",
            "x-oapi-codegen-extra-tags": {
              "json": "main"
            }
          },
          "Description": {
            "description": "Weather condition within the group. Please find more here. You can get the output in your language.",
            "type": "string",
            "x-oapi-codegen-extra-tags": {
              "json": "description"
            }
          },
          "Icon": {
            "description": "Weather icon id",
            "type": "string",
            "x-oapi-codegen-extra-tags": {
              "json": "icon"
            }
          },
          "Id": {
            "description": "Weather condition id",
            "type": "integer",
            "format": "int64",
            "x-oapi-codegen-extra-tags": {
              "json": "id"
            }
          }
        }
      },
      "OpenWeatherMapResponseWind": {
        "description": "Open Weather API Wind Data.",
        "type": "object",
        "required": [
          "Speed",
          "WindDirectionDegrees",
          "Gust"
        ],
        "properties": {
          "Speed": {
            "description": "Wind speed. Unit Default: meter/sec, Metric: meter/sec, Imperial: miles/hour",
            "type": "number",
            "format": "double",
            "x-oapi-codegen-extra-tags": {
              "json": "speed"
            }
          },
          "WindDirectionDegrees": {
            "description": "Wind direction, degrees (meteorological)",
            "type": "number",
            "format": "double",
            "x-oapi-codegen-extra-tags": {
              "json": "deg"
            }
          },
          "Gust": {
            "description": "Wind gust. Unit Default: meter/sec, Metric: meter/sec, Imperial: miles/hour",
            "type": "number",
            "format": "double",
            "x-oapi-codegen-extra-tags": {
              "json": "gust"
            }
          }
        }
      },
      "WeatherConditionGetParameters": {
        "description": "Weather Web App Parameters for Get Weather Data",
        "type": "object",
        "required": null,
        "properties": {
          "Latitude": {
            "description": "latitude of location on earth to get weather data for",
            "type": "number",
            "format": "double",
            "x-oapi-codegen-extra-tags": {
              "json": "lat"
            }
          },
          "Longitude": {
            "description": "longitude of location on earth to get weather data for",
            "type": "number",
            "format": "double",
            "x-oapi-codegen-extra-tags": {
              "json": "lon"
            }
          },
          "AppId": {
            "description": "OpenWeatherMap API ID/Key generated by signing up to use their APIs",
            "type": "string",
            "x-oapi-codegen-extra-tags": {
              "json": "appid"
            }
          }
        }
      },
      "WeatherConditionGetResponse": {
        "description": "Weather Web App Parameters for Get Weather Data",
        "type": "object",
        "required": [
          "temperature",
          "temperature_condition",
          "outside_condition",
          "city"
        ],
        "properties": {
          "city": {
            "description": "The City found at the latitude & longitude",
            "type": "string"
          },
          "outside_condition": {
            "description": "The outside condition.",
            "type": "string"
          },
          "temperature_condition": {
            "description": "The temperature condition.",
            "type": "string"
          },
          "temperature": {
            "description": "The temperature in degrees fahrenheit",
            "type": "string"
          }
        }
      },
      "MtgZones": {
        "description": "Magic: The Gathering Standard game play meta data",
        "type": "object",
        "required": [
          "battlefield",
          "hand",
          "library",
          "graveyard",
          "the_stack",
          "exile"
        ],
        "properties": {
          "battlefield": {
            "description": "Cards in Battlefield",
            "type": "array",
            "items": {
              "description": "Magic: The Gathering Standard game play meta data",
              "type": "object",
              "required": [
                "creatures",
                "lands"
              ],
              "properties": {
                "creatures": {
                  "description": "Creatures List",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MtgBattleCard"
                  }
                },
                "lands": {
                  "description": "Lands / Resources List",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MtgBattleCard"
                  }
                }
              }
            }
          },
          "hand": {
            "description": "List of cards in Player hand",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MtgBattleCard"
            }
          },
          "library": {
            "description": "Lands / Resources List",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MtgBattleCard"
            }
          },
          "graveyard": {
            "description": "Lands / Resources List",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MtgBattleCard"
            }
          },
          "the_stack": {
            "description": "Spells unresolved List",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MtgBattleCard"
            }
          },
          "exile": {
            "description": "Lands / Resources List",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MtgBattleCard"
            }
          }
        }
      },
      "MtgPlayer": {
        "description": "Magic: The Gathering Standard game play meta data",
        "type": "object",
        "required": [
          "zones",
          "deck",
          "name"
        ],
        "properties": {
          "name": {
            "description": "Player Name",
            "type": "string"
          },
          "zones": {
            "description": "Cards in each Zone",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MtgZones"
            }
          },
          "deck": {
            "description": "Deck cards List. Rules of the Deck: 60 Card minimum, 4 limit on copies (exception for basic lands).",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MtgCard"
            }
          }
        }
      },
      "MtgBattleField": {
        "description": "Magic: The Gathering Standard game play meta data",
        "type": "object",
        "required": [
          "creatures",
          "lands"
        ],
        "properties": {
          "creatures": {
            "description": "Creatures List",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MtgBattleCard"
            }
          },
          "lands": {
            "description": "Lands / Resources List",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MtgBattleCard"
            }
          }
        }
      },
      "MtgGameManager": {
        "description": "Magic: The Gathering Game Manager and Game meta data",
        "type": "object",
        "required": [
          "players",
          "game_phase",
          "player_turn",
          "game_format",
          "invalid_players"
        ],
        "properties": {
          "players": {
            "description": "List Players playing MTG.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MtgPlayer"
            }
          },
          "game_phase": {
            "description": "Magic offically labels its gameplay as \"Begin, Main Phase, Combat, Second Main Phase, and End\"; some have subphases. For details see: https://en.wikipedia.org/wiki/Magic:_The_Gathering_rules#Gameplay.",
            "type": "string",
            "enum": [
              "Begin-Untap",
              "Begin-Upkeep",
              "Begin-Draw",
              "Main-First",
              "Combat-Beginning",
              "Combat-Declare-Attackers",
              "Combat-Declare-Blockers",
              "Combat-Damage",
              "Combat-End",
              "Main-Second",
              "End-Step",
              "End-Cleanup"
            ]
          },
          "player_turn": {
            "description": "Current player turn. Index of playerBattleFields.",
            "type": "integer",
            "format": "int"
          },
          "game_format": {
            "description": "Magic offically labels its gameplay as \"Begin, Main Phase, Combat, Second Main Phase, and End\"; some have subphases. For details see: https://en.wikipedia.org/wiki/Magic:_The_Gathering_rules#Gameplay.",
            "type": "string",
            "enum": [
              "Main-Second",
              "End-Step",
              "End-Cleanup"
            ]
          },
          "invalid_players": {
            "description": "List of errors from players' decks or other data. Empty list signals all players are valid and ready to play.",
            "type": "array",
            "items": {
              "additionalProperties": {}
            }
          }
        }
      },
      "MtgSet": {
        "description": "Magic: The Gathering card data",
        "type": "object",
        "required": null,
        "properties": {
          "name": {
            "description": "Set Name",
            "type": "string"
          }
        }
      },
      "MtgCard": {
        "description": "Magic: The Gathering card data",
        "type": "object",
        "required": null,
        "properties": {
          "name": {
            "description": "The card name. For split, double-faced and flip cards, just the name of one side of the card. Basically each 'sub-card' has its own record.",
            "type": "string"
          },
          "names": {
            "description": "Only used for split, flip and dual cards. Will contain all the names on this card, front or back.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "manaCost": {
            "description": "The mana cost of this card. Consists of one or more mana symbols. (use cmc and colors to query)",
            "type": "string"
          },
          "cmc": {
            "description": "Converted mana cost. Always a number.",
            "type": "number",
            "format": "double"
          },
          "colors": {
            "description": "The card colors. Usually this is derived from the casting cost, but some cards are special (like the back of dual sided cards and Ghostfire).",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "colorIdentity": {
            "description": "The card colors by color code. [\"Red\", \"Blue\"] becomes [\"R\", \"U\"]",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "type": {
            "description": "The card type. This is the type you would see on the card if printed today. Note: The dash is a UTF8 'long dash' as per the MTG rules",
            "type": "string"
          },
          "types": {
            "description": "The types of the card. These appear to the left of the dash in a card type. Example values: Instant, Sorcery, Artifact, Creature, Enchantment, Land, Planeswalker",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "supertypes": {
            "description": "The supertypes of the card. These appear to the far left of the card type. Example values: Basic, Legendary, Snow, World, Ongoing",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "subtypes": {
            "description": "The subtypes of the card. These appear to the right of the dash in a card type. Usually each word is its own subtype. Example values: Trap, Arcane, Equipment, Aura, Human, Rat, Squirrel, etc.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "rarity": {
            "description": "The rarity of the card. Examples: Common, Uncommon, Rare, Mythic Rare, Special, Basic Land",
            "type": "string"
          },
          "set": {
            "description": "The set the card belongs to (set code).",
            "x-go-type": "mtg.SetCode"
          },
          "setName": {
            "description": "The set the card belongs to.",
            "type": "string"
          },
          "text": {
            "description": "The oracle text of the card. May contain mana symbols and other symbols.",
            "type": "string"
          },
          "flavor": {
            "description": "The flavor text of the card.",
            "type": "string"
          },
          "artist": {
            "description": "The artist of the card. This may not match what is on the card as MTGJSON corrects many card misprints.",
            "type": "string"
          },
          "number": {
            "description": "The card number. This is printed at the bottom-center of the card in small text. This is a string, not an integer, because some cards have letters in their numbers.",
            "type": "string"
          },
          "power": {
            "description": "The power of the card. This is only present for creatures. This is a string, not an integer, because some cards have powers like: \"1+*\"",
            "type": "string"
          },
          "toughness": {
            "description": "The toughness of the card. This is only present for creatures. This is a string, not an integer, because some cards have toughness like: \"1+*\"",
            "type": "string"
          },
          "loyalty": {
            "description": "The loyalty of the card. This is only present for planeswalkers.",
            "type": "string"
          },
          "layout": {
            "description": "The card layout. Possible values: normal, split, flip, double-faced, token, plane, scheme, phenomenon, leveler, vanguard",
            "type": "string"
          },
          "multiverseid": {
            "description": "The multiverseid of the card on Wizard's Gatherer web page. Cards from sets that do not exist on Gatherer will NOT have a multiverseid. Sets not on Gatherer are: ATH, ITP, DKM, RQS, DPA and all sets with a 4 letter code that starts with a lowercase 'p'.",
            "x-go-type": "mtg.MultiverseId"
          },
          "variations": {
            "description": "If a card has alternate art (for example, 4 different Forests, or the 2 Brothers Yamazaki) then each other variation's multiverseid will be listed here, NOT including the current card's multiverseid.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "imageUrl": {
            "description": "The image url for a card. Only exists if the card has a multiverse id.",
            "type": "string"
          },
          "watermark": {
            "description": "The watermark on the card. Note: Split cards don't currently have this field set, despite having a watermark on each side of the split card.",
            "type": "string"
          },
          "border": {
            "description": "If the border for this specific card is DIFFERENT than the border specified in the top level set JSON, then it will be specified here. (Example: Unglued has silver borders, except for the lands which are black bordered)",
            "type": "string"
          },
          "timeshifted": {
            "description": "If this card was a timeshifted card in the set.",
            "type": "boolean"
          },
          "hand": {
            "description": "Maximum hand size modifier. Only exists for Vanguard cards.",
            "type": "integer",
            "format": "int"
          },
          "life": {
            "description": "Starting life total modifier. Only exists for Vanguard cards.",
            "type": "integer",
            "format": "int"
          },
          "reserved": {
            "description": "Set to true if this card is reserved by Wizards Official Reprint Policy",
            "type": "boolean"
          },
          "releaseDate": {
            "description": "The date this card was released. This is only set for promo cards. The date may not be accurate to an exact day and month, thus only a partial date may be set (YYYY-MM-DD or YYYY-MM or YYYY). Some promo cards do not have a known release date.",
            "type": "string",
            "format": "Date"
          },
          "starter": {
            "description": "Set to true if this card was only released as part of a core box set. These are technically part of the core sets and are tournament legal despite not being available in boosters.",
            "type": "boolean"
          },
          "rulings": {
            "description": "The rulings for the card.",
            "type": "array",
            "items": {
              "x-go-type": "*mtg.Ruling"
            }
          },
          "foreignNames": {
            "description": "Foreign language names for the card, if this card in this set was printed in another language. An array of objects, each object having 'language', 'name' and 'multiverseid' keys. Not available for all sets.",
            "type": "array",
            "items": {
              "x-go-type": "mtg.ForeignCardName"
            }
          },
          "printings": {
            "description": "The sets that this card was printed in, expressed as an array of set codes.",
            "type": "array",
            "items": {
              "x-go-type": "mtg.SetCode"
            }
          },
          "originalText": {
            "description": "The original text on the card at the time it was printed. This field is not available for promo cards.",
            "type": "string"
          },
          "originalType": {
            "description": "The original type on the card at the time it was printed. This field is not available for promo cards.",
            "type": "string"
          },
          "id": {
            "description": "A unique id for this card. It is made up by doing an SHA1 hash of setCode + cardName + cardImageName",
            "x-go-type": "mtg.CardId"
          },
          "source": {
            "description": "For promo cards, this is where this card was originally obtained. For box sets that are theme decks, this is which theme deck the card is from.",
            "type": "string"
          },
          "legalities": {
            "description": "Which formats this card is legal, restricted or banned in. An array of objects, each object having 'format' and 'legality'.",
            "type": "array",
            "items": {
              "x-go-type": "mtg.Legality"
            }
          }
        }
      },
      "MtgBattleCard": {
        "description": "Magic: The Gathering card data with meta data for in play. This augments the card for in play activities.",
        "type": "object",
        "required": null,
        "properties": {
          "card": {
            "$ref": "#/components/schemas/MtgCard"
          },
          "is_tapped": {
            "description": "boolean signaling the card has been tapped this turn within play or battle.",
            "type": "boolean"
          },
          "is_blocker": {
            "description": "boolean signaling the card is being used this turn as a blocker within play or battle.",
            "type": "boolean"
          },
          "is_attacker": {
            "description": "boolean signaling the card is being used this turn as an attacker within play or battle.",
            "type": "boolean"
          },
          "power": {
            "description": "power of attack or defense this turn.",
            "type": "string"
          },
          "life": {
            "description": "life of this creature this turn.",
            "type": "string"
          }
        }
      }
    }
  }
}
